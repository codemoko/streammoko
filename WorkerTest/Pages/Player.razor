@page "/player"
@inject IJSRuntime jsRuntime
@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IAccessTokenProvider TokenProvider
@inject IDialogService DialogService
@using Microsoft.AspNetCore.Components.Authorization
@inject SignOutSessionStateManager SignOutManager
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Newtonsoft.Json
@using System.Text

<AuthorizeView>
    <Authorized>
        @{
            var user = @context.User.Identity.Name;
        }
        Hello, @user!
        <div id="player-curtain" class="hide">
            <iframe src="https://iframe.videodelivery.net/4000e352c84d5f2b7a3e863dc485c777"
                    style="border: none; width: 800px;"
                    preload=""
                    allow="accelerometer; gyroscope; autoplay; encrypted-media; picture-in-picture;"
                    allowfullscreen="true"
                    id="stream-player"></iframe>
        </div>
        <MudButton @onclick="OpenDialog">Open Images</MudButton>
    </Authorized>
    <NotAuthorized>
        <a href="authentication/login">Log in</a>
    </NotAuthorized>
</AuthorizeView>
<h3>Player</h3>

@code {
    public CloudflareImageResponse resp { get; set; }
    public class HelloWorld
    {
        public string hello { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        var tokenResult = await TokenProvider.RequestAccessToken(new AccessTokenRequestOptions{Scopes = new List<string>{"openid", "profile"}});
        tokenResult.TryGetToken(out var token);
        if (!string.IsNullOrEmpty(token?.Value))
        {
            var target = $"https://mokowebhooks.azurewebsites.net/api/MokoWebHooks";
            try
            {
                var responseBody = JsonConvert.SerializeObject(new { Token = token.Value, MokoCommand = "CFIMGS"});
                var byteContent = new ByteArrayContent(Encoding.UTF8.GetBytes(responseBody));
                HttpResponseMessage reponse = await Http.PostAsync(target, byteContent);
                var responseEncodedStr = await new StreamReader(reponse.Content.ReadAsStream()).ReadToEndAsync();
                var responseStr = Encoding.UTF8.GetString(Convert.FromBase64String(responseEncodedStr));
                resp = JsonConvert.DeserializeObject<CloudflareImageResponse>(responseStr);
            }
            catch(Exception ex)
            {
                var exMess = ex.Message;
                var notdone = false;
            }
            //var ansy = await Http.GetFromJsonAsync<HelloWorld>(target);
            //var pantsy = false;

        }

    }

    private void OpenDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parms = new DialogParameters();
        parms.Add("ImageResponse", resp);
        DialogService.Show<ImageSelection>("Image Selection", parms);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) => await jsRuntime.InvokeVoidAsync("tryLoadPlayer");
}
