@page "/player"
@inject IJSRuntime jsRuntime
@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IAccessTokenProvider TokenProvider
@inject IDialogService DialogService
@using Microsoft.AspNetCore.Components.Authorization
@inject SignOutSessionStateManager SignOutManager
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Newtonsoft.Json
@using System.Text
@using MokoPages

<AuthorizeView>
    <Authorized>
        @{
            var aaa = @context.User.Claims.FirstOrDefault(x => x.Type == "roles")?.Value;
            var uuu = @context.User;
            var user = @context.User.Identity.Name;
            var role = @context.User.IsInRole("admin");
            var ctp = @context.User.Claims;
        }
        RoleResult @role
        Hello, @user!
        <div id="player-curtain" class="hide">
            <iframe src="https://iframe.videodelivery.net/4000e352c84d5f2b7a3e863dc485c777"
                    style="border: none; width: 800px;"
                    preload=""
                    allow="accelerometer; gyroscope; autoplay; encrypted-media; picture-in-picture;"
                    allowfullscreen="true"
                    id="stream-player"></iframe>
        </div>

        <CloudflareImagesMgr />
    </Authorized>
    <NotAuthorized>
        <a href="authentication/login">Log in</a>
    </NotAuthorized>
</AuthorizeView>
@*<h3>Player</h3>*@

@code {
    public CloudflareImageResponse CloudflareImages { get; set; }
    //public bool buttonDisabled = true;
    protected override async Task OnInitializedAsync()
    {
        var tokenResult = await TokenProvider.RequestAccessToken(new AccessTokenRequestOptions{Scopes = new List<string>{"openid", "profile"}});
        tokenResult.TryGetToken(out var token);
        if (!string.IsNullOrEmpty(token?.Value))
        {
            //var target = $"https://mokowebhooks.azurewebsites.net/api/MokoWebHooks"; //prod
            //var result = await httpClient.GetStringAsync($"https://api.cloudflare.com/client/v4/accounts/027e91bbdc18f8d25e2629835deb5d69/images/v1?page={page}&per_page={perPage}");

            var target = $"http://localhost:7071/api/MokoWebHooks"; //dev
            try
            {
                var responseBody = JsonConvert.SerializeObject(new { Token = token.Value, MokoCommand = "CFIMGS"});
                var byteContent = new ByteArrayContent(Encoding.UTF8.GetBytes(responseBody));
                HttpResponseMessage reponse = await Http.PostAsync(target, byteContent);
                var responseStr = await new StreamReader(reponse.Content.ReadAsStream()).ReadToEndAsync();
                CloudflareImages = JsonConvert.DeserializeObject<CloudflareImageResponse>(responseStr);
            }
            catch(Exception ex)
            {
                var exMess = ex.Message;
            }
        }

    }

    //private void OpenDialog()
    //{
    //    var options = new DialogOptions { CloseOnEscapeKey = true };
    //    var parms = new DialogParameters();
    //    parms.Add("ImageResponse", CloudflareImages);
    //    DialogService.Show<ImageSelection>("Image Selection", parms);
    //}

    protected override async Task OnAfterRenderAsync(bool firstRender) => await jsRuntime.InvokeVoidAsync("tryLoadPlayer");
}
