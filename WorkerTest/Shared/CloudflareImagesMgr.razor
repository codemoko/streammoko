@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Components.Authorization
@using System.Text
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IAccessTokenProvider TokenProvider
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<AuthorizeView>
    <Authorized>
        @{
            var user = @context.User.Identity.Name;
        }
        @*@if (!initalLoad)
        {
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
        }
        else
        {*@
            <MudButton Disabled="@openImagesDisabled" @onclick="OpenDialog">Open Images</MudButton>
            <MudButton Disabled="@syncCloudflareImagesDisabled" @onclick="SyncCF">Sync with Cloudflare</MudButton>
        @*}*@
    </Authorized>
    <NotAuthorized>
        <a href="authentication/login">Log in</a>
    </NotAuthorized>
</AuthorizeView>

@code {

    private bool initalLoad = false;

    private bool syncCloudflareImagesDisabled = false;
    private bool openImagesDisabled = true;
    private string target = "http://localhost:7071/api/MokoWebHooks";
    private CloudflareImagePage[] CloudflareImages { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var tokenResult = await TokenProvider.RequestAccessToken(new AccessTokenRequestOptions{Scopes = new List<string>{"openid", "profile"}});
        tokenResult.TryGetToken(out var token);
        if (!string.IsNullOrEmpty(token?.Value) && CloudflareImages == null)
        {
            //var target = $"https://mokowebhooks.azurewebsites.net/api/MokoWebHooks"; //prod
            //var result = await httpClient.GetStringAsync($"https://api.cloudflare.com/client/v4/accounts/027e91bbdc18f8d25e2629835deb5d69/images/v1?page={page}&per_page={perPage}");
            var target = $"http://localhost:7071/api/MokoWebHooks"; //dev
            try
            {
                var responseBody = JsonConvert.SerializeObject(new { Token = token.Value, MokoCommand = "IMGS"});
                var byteContent = new ByteArrayContent(Encoding.UTF8.GetBytes(responseBody));
                HttpResponseMessage reponse = await Http.PostAsync(target, byteContent);
                var responseStr = await new StreamReader(reponse.Content.ReadAsStream()).ReadToEndAsync();
                CloudflareImages = JsonConvert.DeserializeObject<CloudflareImagePage[]>(responseStr);
                initalLoad = true;
                openImagesDisabled = false;
                StateHasChanged();
            }
            catch(Exception ex)
            {
                var exMess = ex.Message;
            }
        }
        return;
    }

    private async Task SyncCF()
    {
        Snackbar.PrintSnackbar("Syncing any new Cloudflare Images."); //add this to config
        var mokoRequest = await TokenProvider.GetMokoRequestAsync(MokoCommand.SYNCIMGS);
        var byteContent = mokoRequest.ToJsonByteArrayContent();
        var httpResponse = await Http.PostAsync(target, byteContent);
        var responseStr = await new StreamReader(await httpResponse.Content.ReadAsStreamAsync()).ReadToEndAsync();
        Snackbar.PrintSnackbar(responseStr);
    }

    private void OpenDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parms = new DialogParameters();
        parms.Add("ImageResponse", CloudflareImages);
        DialogService.Show<ImageSelection>("Image Selection", parms);
    }
}